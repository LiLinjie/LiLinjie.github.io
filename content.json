[{"title":"Font Boosting ——chrome手机端页面文字显示bug","date":"2017-02-09T03:06:23.000Z","path":"2017/02/09/Font-Boosting-——chrome手机端页面文字显示bug/","text":"参考网址在做手机端页面时，会出现一个奇怪的问题:字体的显示大小与在css中指定的大小不一致。 当页面中的标签数量或者文本数量大于某一个值，或者当CSS定义的字体大小落在某个区间时，这个问题才会被触发。而且字体变大后的值也随着原始定义的字体大小而改变 这个特性被称作Text Autosizer，又称Font Boosting、Font Inflation，是Webkit给移动端浏览器提供的一个特性：当我们在手机上浏览网页时，很可能因为原始页面宽度较大，在手机屏幕上缩小后就看不清其中的文字了。而 Font Boosting 特性在这时会自动将其中的文字字体变大，保证在即不需要左右滑动屏幕，也不需要双击放大屏幕内容的前提下，也可以让人们方便的阅读页面中的文本。 不过这个特性并不总是有必要的，网上有这么一些处理方案： 手动指定viewport width=320 ，这时Font Boosting 不会被触发。（后边可以知道，这个说法不严谨，在其他设置均为默认值时，这一条才有效） Font Boosting 仅在未限定尺寸的文本流中有效，给元素指定宽高，就可以避免Font Boosting被触发。 显然第 2 条方案是有缺陷的，文本内容不可能都指定宽高。不过还好，我们可以通过指定max-height来禁掉Font Boosting。比如 body * { max-height: 999999px; }就可以无副作用的禁掉 Font Boosting 特性。 到这里，我们已经明白问题所在，并且也有解决方案了。但是有一个问题仍然困扰着我：当字体大于某一个值时（比如当不指定viewport width，手机屏幕width=320，字体大于等于82px时），这个 Font Boosting 就始终不会被触发。Chrome 是如何计算的，这其中的逻辑又是什么？ 经搜索，在网上找到了以下内容。 简单说来，Font Boosting 的计算规则伪代码如下：12345678910multiplier = Math.max(1, deviceScaleAdjustment * textScalingSlider * systemFontScale * clusterWidth / screenWidth);if (originFontSize &lt; 16) &#123; computedFontSize = originFontSize * multiplier;&#125;else if (16 &lt;= originFontSize &lt;= (32 * multiplier - 16)) &#123; computedFontSize = (originFontSize / 2) + (16 * multiplier - 8);&#125;else if (originFontSize &gt; (32 * multiplier - 16)) &#123; computedFontSize = originFontSize;&#125; 其中变量名解释如下： originFontSize : 原始字体大小 computedFontSize : 经过计算后的字体大小 multiplier : 换算系数，值由以下几个值计算得到 deviceScaleAdjustment : 当指定 viewport width=device-width 时此值为 1，否则值在 1.05 - 1.3 之间，有专门的计算规则 textScalingSlider : 浏览器中手动指定的缩放比例，默认为 1 systemFontScale : 系统字体大小，Android设备可以在「设备 - 显示 - 字体大小」处设置，默认为 1 clusterWidth : 应用 Font Boosting 特性字体所在元素的宽度（如何确定这个元素请参考上边两个链接） screenWidth : 设备屏幕分辨率（DIPs, Density-Independent Pixels），如 iPhone 5 为 320 说到底，只需要记住 body * { max-height: 999999px; } 就OK了。","tags":[{"name":"移动端","slug":"移动端","permalink":"http://lilinjie.github.io/tags/移动端/"}]},{"title":"Hexo 搭建github博客","date":"2017-02-07T03:29:09.000Z","path":"2017/02/07/Hexo 搭建github博客/","text":"配置环境安装Node、Git，申请github 正式安装HexoNode和Git都安装好后，创建一个文件夹，如hexo，用于存放hexo的配置文件，然后进入hexo安装Hexo。 执行如下命令安装Hexo:1npm install hexo -g 然后初始化hexo，执行init命令:1hexo init 至此，安装工作完成。 生成静态页1hexo generate // (hexo g也可以) 本地启动启动本地服务，进行文章预览调试1hexo server // (hexo s) 浏览器输入http://localhost:4000，即可预览 配置Github建立Repository建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 建立联系打开hexo下的_config.yml文件，翻到最下面，改成1234deploy: type: git repo: https://github.com/LiLinjie/LiLinjie.github.io.git branch: master 安装hexo-deployer-git，执行命令：1npm install hexo-deployer-git --save 然后再执行命令：1hexo deploy // (hexo d) 部署步骤每次部署的步骤，可按以下三步来进行：123hexo cleanhexo generatehexo deploy 一些常用命令hexo new”postName” #新建文章 hexo new page”pageName” #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server） hexo deploy #将.deploy目录部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本","tags":[]}]